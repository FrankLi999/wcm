<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

  <groupId>com.bpwizard.wcm-bpm</groupId>
	<artifactId>wcm-bpm-parent</artifactId>
	<packaging>pom</packaging>
	<version>0.0.1-SNAPSHOT</version>
	<name>wcm-bpm-parent</name>
	<description>Spring Boot Modeshape/Camunda parent</description>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.4.1</version>
		<!-- <version>2.1.6.RELEASE</version>  -->
		<relativePath/> <!-- lookup parent from repository -->
	</parent>

    <modules>
	  <module>spring-commons</module>
	  <module>camunda-boot</module>
	  <module>modeshape-boot</module>
	  <module>setup</module>
	  <!--
	  <module>gateway-boot</module>
	  -->
	</modules>
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>
		<springfox.version>2.9.2</springfox.version>
		<modeshape.version>5.4.1.Final</modeshape.version>
		<atomikos.version>4.0.6</atomikos.version>
		<mybatis.version>3.5.6</mybatis.version>
		<joda-time.version>2.1</joda-time.version>
		<!--
		<ignite.version>2.8.0</ignite.version>
		-->
		<ignite.version>2.8.0</ignite.version>
		<hazelcast-jet.version>4.3</hazelcast-jet.version>
		<hazelcast.version>4.1.1</hazelcast.version>
		<tensorflow.version>1.14.0</tensorflow.version>
		<grpc.version>1.24.0</grpc.version>
		<gson.version>2.8.5</gson.version>
		<checker-compat-qual.version>2.5.5</checker-compat-qual.version>
		<drools-version>7.27.0.Final</drools-version>
		<spring-cloud-kubernetes.version>1.1.1.RELEASE</spring-cloud-kubernetes.version>
		<jaxb.api.version>2.3.1</jaxb.api.version>
		<json-schema-validator.version>1.0.43</json-schema-validator.version>
		<io.prometheus.version>0.9.0</io.prometheus.version>
		<wiremock.version>2.27.2</wiremock.version>
		<Java-WebSocket.version>1.5.0</Java-WebSocket.version>
		<mybatis-spring-boot-starter.version>2.1.4</mybatis-spring-boot-starter.version>
		
		<jacoco.dataFile>${project.basedir}/target/jacoco.exec</jacoco.dataFile>
		<sonar.jacoco.reportPaths>${project.basedir}/target/jacoco.exec</sonar.jacoco.reportPaths>
		<jacoco.reporting.outputDirectory>${project.basedir}/target/reports/jacoco</jacoco.reporting.outputDirectory>
		<aggregate.report.dir>target/site/jacoco-aggregate/jacoco.xml</aggregate.report.dir>
		
		<swagger-rest-locations>com.bpwizard.boot.web</swagger-rest-locations>
		<swagger-host>host:port</swagger-host>
		<project.artifact.name>${project.artifactId}</project.artifact.name>
    <build.number>LOCAL</build.number>
		<docker.port></docker.port>

		<!--
		<unit-tests.skip>true</unit-tests.skip>
		<integration-tests.skip>true</integration-tests.skip>
		
		<sonar.java.coveragePlugin>jacoco</sonar.java.coveragePlugin>
		<sonar.dynamicAnalysis>reuseReports</sonar.dynamicAnalysis>
		<sonar.language>java</sonar.language>
		<sonar.exclusions> **/domain/*
		</sonar.exclusions>
		<surefire.forkNumber>0</surefire.forkNumber>
		
		<jacoco.inclNoLocationClasses>true</jacoco.inclNoLocationClasses>
		-->
	</properties>

	<dependencyManagement>
		<dependencies>
		  <dependency>
        <groupId>org.mybatis</groupId>
        <artifactId>mybatis</artifactId>
        <version>${mybatis.version}</version>
      </dependency>
      <dependency>
				<groupId>joda-time</groupId>
				<artifactId>joda-time</artifactId>
				<version>${joda-time.version}</version>
			</dependency>
		  <dependency>
				<groupId>javax.xml.bind</groupId>
				<artifactId>jaxb-api</artifactId>
				<version>${jaxb.api.version}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-kubernetes-dependencies</artifactId>
				<version>${spring-cloud-kubernetes.version}</version>
				<type>pom</type>
				<scope>import</scope>
			  </dependency>
		    <!-- 
			<dependency>
				<groupId>com.hazelcast</groupId>
				<artifactId>hazelcast</artifactId>
				<version>${hazelcast.version}</version>
			</dependency>
			<dependency>
				<groupId>com.hazelcast</groupId>
				<artifactId>hazelcast-spring</artifactId>
				<version>${hazelcast.version}</version>
			</dependency>
			 -->
			<dependency>
			    <groupId>com.hazelcast</groupId>
			    <artifactId>hazelcast</artifactId>
			    <version>${hazelcast.version}</version>
			</dependency>			
			<dependency>
			    <groupId>com.hazelcast</groupId>
			    <artifactId>hazelcast-spring</artifactId>
			    <version>${hazelcast.version}</version>
			</dependency>					
			<dependency>
			    <groupId>com.hazelcast.jet</groupId>
			    <artifactId>hazelcast-jet</artifactId>
			    <version>${hazelcast-jet.version}</version>
			</dependency>
			<dependency>
			    <groupId>com.hazelcast.jet</groupId>
			    <artifactId>hazelcast-jet-spring</artifactId>
			    <version>${hazelcast-jet.version}</version>
			</dependency>
			<dependency>
				<groupId>com.github.ulisesbocchio</groupId>
				<artifactId>jasypt-spring-boot-starter</artifactId>
				<version>2.1.1</version>
			</dependency>
			<dependency>
				<groupId>org.modeshape.bom</groupId>
				<artifactId>modeshape-bom-embedded</artifactId>
				<version>${modeshape.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>org.apache.ignite</groupId>
				<artifactId>ignite-core</artifactId>
				<version>${ignite.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.ignite</groupId>
				<artifactId>ignite-spring</artifactId>
				<version>${ignite.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.ignite</groupId>
				<artifactId>ignite-indexing</artifactId>
				<version>${ignite.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.ignite</groupId>
				<artifactId>ignite-rest-http</artifactId>
				<version>${ignite.version}</version>
			</dependency>
				<dependency>
				<groupId>org.apache.ignite</groupId>
				<artifactId>ignite-spring-data</artifactId>
				<version>${ignite.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.ignite</groupId>
				<artifactId>ignite-slf4j</artifactId>
				<version>${ignite.version}</version>
			</dependency>
			<dependency>
			    <groupId>org.apache.ignite</groupId>
			    <artifactId>ignite-hibernate_5.3</artifactId>
			    <version>${ignite.version}</version>
			</dependency>
			<dependency>
				<groupId>org.mybatis.caches</groupId>
				<artifactId>mybatis-ignite</artifactId>
				<version>1.1.0</version>
			</dependency>
			<dependency>
				<groupId>com.networknt</groupId>
				<artifactId>json-schema-validator</artifactId>
				<version>${json-schema-validator.version}</version>
			</dependency>
			<dependency>
            <groupId>io.prometheus</groupId>
				<artifactId>simpleclient</artifactId>
				<version>${io.prometheus.version}</version>
			</dependency>
			<dependency>
				<groupId>io.prometheus</groupId>
				<artifactId>simpleclient_httpserver</artifactId>
				<version>${io.prometheus.version}</version>
			</dependency>
			<dependency>
				<groupId>io.prometheus</groupId>
				<artifactId>simpleclient_hotspot</artifactId>
				<version>${io.prometheus.version}</version>
			</dependency>
			<dependency>
				<groupId>org.java-websocket</groupId>
				<artifactId>Java-WebSocket</artifactId>
				<version>${Java-WebSocket.version}</version>
			</dependency>
			<dependency>
				<groupId>com.github.tomakehurst</groupId>
				<artifactId>wiremock-standalone</artifactId>
				<version>${wiremock.version}</version>
				<scope>test</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>
	<build>
    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>org.sonarsource.scanner.maven</groupId>
          <artifactId>sonar-maven-plugin</artifactId>
          <version>3.7.0.1746</version>
        </plugin>
        <plugin>
          <groupId>org.jacoco</groupId>
          <artifactId>jacoco-maven-plugin</artifactId>
          <version>0.8.6</version>
        </plugin>
      </plugins>
    </pluginManagement>
  </build>

<profiles>
	<!-- sonar uses global setting
	<profile>
		<id>sonar</id>
		<activation>
			<activeByDefault>false</activeByDefault>
		</activation>
		<properties>
			<sonar.host.url>
				http://sonar:19000
			</sonar.host.url>
		</properties>
		<build>
			<plugins>
				<plugin>
					<groupId>org.sonarsource.scanner.maven</groupId>
		<artifactId>sonar-maven-plugin</artifactId>
				</plugin>
			</plugins>
		</build>
	</profile>
	-->
	
	<profile>
		<id>coverage</id>
		<activation>
			<activeByDefault>false</activeByDefault>
		</activation>
		<build>
			<plugins>
				<plugin>
					<groupId>org.jacoco</groupId>
					<artifactId>jacoco-maven-plugin</artifactId>
					<configuration>
						<destFile>${sonar.jacoco.reportPaths}</destFile>
						<append>true</append>
					</configuration>
					<executions>
						<execution>
							<id>default-prepare-agent</id>
							<goals>
								<goal>prepare-agent</goal>
							</goals>
						</execution>
						<execution>
							<id>default-report</id>
							<goals>
								<goal>report</goal>
							</goals>
							<configuration>
								<outputDirectory>${jacoco.reporting.outputDirectory}</outputDirectory>
							</configuration>
						</execution>
						<execution>
							<id>default-report-aggregate</id>
							<phase>verify</phase>
							<goals>
								<goal>report-aggregate</goal>
							</goals>
							<configuration>
								<dataFileIncludes>
									<dataFileInclude>${jacoco.dataFile}</dataFileInclude>
								</dataFileIncludes>
							</configuration>
						</execution>
					</executions>
				</plugin>
			</plugins>
		</build>
	</profile>
	<profile>
		<id>swagger</id>
		<activation>
			<activeByDefault>false</activeByDefault>
		</activation>
		<build>
			<plugins>
				<plugin>
					<groupId>com.github.kongchen</groupId>
					<artifactId>swagger-maven-plugin</artifactId>
					<version>3.1.0</version>
					<configuration>
						<apiSources>
							<apiSource>
								<springmvc>true</springmvc>
								<locations>${swagger-rest-locations}</locations>
								<host>${swagger-host}</host>
								<basePath>/</basePath>
								<info>
									<title>Application manager swagger</title>
									<version>0.0.1</version>
									<contact>
										<email>frank.li@test.com</email>
										<name>Frank Li</name>
									</contact>
									<license>
										<url>http://www.apache.org/licenses/LICENSE-2.0.html</url>
										<name>Apache 2.0</name>
									</license>
								</info>
								<swaggerDirectory>${project.build.directory}/generated/swagger-ui</swaggerDirectory>
							</apiSource>
						</apiSources>
					</configuration>
					<executions>
						<execution>
							<phase>compile</phase>
							<goals>
								<goal>generate</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
			</plugins>
		</build>
	</profile>
	<profile>
		<id>unit-test</id>
		<activation>
			<activeByDefault>true</activeByDefault>
		</activation>
		<properties>
			<unit-tests.skip>true</unit-tests.skip>
		</properties>
		<build>
			<plugins>
				<plugin>
					<artifactId>maven-surefire-plugin</artifactId>
					<configuration>
						<skipTests>${unit-tests.skip}</skipTests>
						<excludes>
							<exclude>**/*IT.java</exclude>
						</excludes>
					</configuration>
				</plugin>
			</plugins>
		</build>
	</profile>
	<!-- The Configuration of the integration-test profile -->
	<profile>
		<id>integration-test</id>
		<activation>
			<activeByDefault>false</activeByDefault>
		</activation>
		<properties>
			<integration-tests.skip>true</integration-tests.skip>
		</properties>
		<build>
			<plugins>
				<plugin>
					<artifactId>maven-failsafe-plugin</artifactId>
					<configuration>
						<skipTests>${integration-tests.skip}</skipTests>
						<includes>
							<include>**/*IT.java</include>
						</includes>
					</configuration>
					<executions>
						<execution>
							<goals>
								<goal>integration-test</goal>
								<goal>verify</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>net.masterthought</groupId>
					<artifactId>maven-cucumber-reporting</artifactId>
					<executions>
							<execution>
									<id>execution</id>
									<phase>post-integration-test</phase>
									<goals>
											<goal>generate</goal>
									</goals>
									<configuration>
											<projectName>automation-demo</projectName>
											<outputDirectory>${project.build.directory}/cucumber-reports</outputDirectory>
											<jsonFiles>
													<param>${project.build.directory}/cucumber-report.json</param>
											</jsonFiles>
<!--                            <cucumberOutput>${project.build.directory}/temperatureReading.json</cucumberOutput>-->
											<!--<skippedFails>true</skippedFails>-->
											<!--<enableFlashCharts>false</enableFlashCharts>-->
											<!--<buildNumber>${build_number}</buildNumber>-->
									</configuration>
							</execution>
					</executions>
			</plugin>
			</plugins>
		</build>
	</profile>
	<profile>
		<id>docker-stop-container</id>
		<activation>
			<activeByDefault>false</activeByDefault>
		</activation>
		<properties>
			<docker.image.prefix>container-registry:32000</docker.image.prefix>
			<docker.image.name>${project.artifact.name}</docker.image.name>
		</properties>
		<build>
			<plugins>
				<plugin>
				<groupId>org.codehaus.mojo</groupId>
					<artifactId>exec-maven-plugin</artifactId>
		<executions>
						<!-- stop the container-->
						<execution>
							<id>docker-stop-container</id>
							<goals>
								<goal>exec</goal>
							</goals>
						</execution>
					</executions>
					<configuration>
						<executable>docker</executable>
						<workingDirectory>${project.basedir}</workingDirectory>
						<arguments>
							<argument>container</argument>
							<argument>stop</argument>
							<argument>${docker.image.name}</argument>
						</arguments>
						<successCodes>
										<successCode>0</successCode>
							<successCode>1</successCode>
						</successCodes>
					</configuration>
				</plugin>
			</plugins>
		</build>
	</profile>
	<profile>
		<id>docker-remove-container</id>
		<activation>
			<activeByDefault>false</activeByDefault>
		</activation>
		<properties>
			<docker.image.prefix>container-registry:32000</docker.image.prefix>
			<docker.image.name>${project.artifact.name}</docker.image.name>
		</properties>
		<build>
			<plugins>
				<plugin>
				<groupId>org.codehaus.mojo</groupId>
					<artifactId>exec-maven-plugin</artifactId>
		<executions>
						<!-- remove the container-->
						<execution>
							<id>docker-remove-container</id>
							<goals>
								<goal>exec</goal>
							</goals>
						</execution>
					</executions>
			<configuration>
						<executable>docker</executable>
						<workingDirectory>${project.basedir}</workingDirectory>
						<arguments>
							<argument>container</argument>
							<argument>rm</argument>
							<argument>${docker.image.name}</argument>
						</arguments>
						<successCodes>
							<successCode>0</successCode>
							<successCode>1</successCode>
						</successCodes>
					</configuration>
				</plugin>
			</plugins>
		</build>
	</profile>
	<profile>
		<id>docker-remove-image</id>
		<activation>
			<activeByDefault>false</activeByDefault>
		</activation>
		<properties>
			<docker.image.prefix>container-registry:32000</docker.image.prefix>
			<docker.image.name>${project.artifact.name}</docker.image.name>
		</properties>
		<build>
			<plugins>
				<plugin>
				<groupId>org.codehaus.mojo</groupId>
					<artifactId>exec-maven-plugin</artifactId>
					<executions>
						<!-- remove the docker image -->
						<execution>
							<id>docker-rmi</id>
							<goals>
								<goal>exec</goal>
							</goals>
						</execution>
					</executions>
					<configuration>
						<executable>docker</executable>
						<workingDirectory>${project.basedir}</workingDirectory>
						<arguments>
							<argument>rmi</argument>
							<argument>${docker.image.prefix}/${docker.image.name}:${project.version}</argument>
							<argument>${docker.image.prefix}/${docker.image.name}:latest</argument>
						</arguments>
						<successCodes>
							<successCode>0</successCode>
							<successCode>1</successCode>
						</successCodes>
					</configuration>
				</plugin>
			</plugins>
		</build>
	</profile>
	<profile>

		<id>docker-run</id>
		<activation>
			<activeByDefault>false</activeByDefault>
		</activation>
		<properties>
			<docker.image.prefix>container-registry:32000</docker.image.prefix>
		<docker.image.name>${project.artifact.name}</docker.image.name>
		</properties>
		<build>
			<plugins>
				<plugin>
				<groupId>org.codehaus.mojo</groupId>
					<artifactId>exec-maven-plugin</artifactId>
					<executions>
						<execution>
							<id>docker-run</id>
							<goals>
							<goal>exec</goal>
							</goals>
						</execution>
					</executions>
					<configuration>
						<executable>docker</executable>
						<workingDirectory>${project.basedir}</workingDirectory>
						<arguments>
							<argument>run</argument>
							<argument>-d</argument>
							<argument>-p</argument>
							<argument>${container-port}</argument>
							<argument>--name</argument>
							<argument>${docker.image.name}</argument>
							<argument>-v</argument>
							<argument>/home/ubuntu/logs/${docker.image.name}:/var/logs</argument>
							<argument>-t</argument>
							<argument>${docker.image.prefix}/${docker.image.name}:latest</argument>
						</arguments>
					</configuration>
				</plugin>
			</plugins>
		</build>
	</profile>
	<profile>
		<id>docker</id>
		<activation>
			<activeByDefault>false</activeByDefault>
		</activation>
		<properties>
			<docker.image.prefix>container-registry:32000</docker.image.prefix>
		<docker.image.name>${project.artifact.name}</docker.image.name>
		<docker.buildArg.JAR_FILE>./target/${project.artifact.name}-${project.version}-${build.number}.jar</docker.buildArg.JAR_FILE>
				<container-port>5002:5002</container-port>
				<probe-url>http://localhost:5002/actuator/health</probe-url>
		</properties>
		<build>
			<plugins>
				<plugin>
					<groupId>io.fabric8</groupId>
					<artifactId>docker-maven-plugin</artifactId>
					<configuration>
						<verbose>true</verbose>
						<!-- <registry>myregistry:5000</registry> -->
						<images>
							<image>
								<name>${docker.image.prefix}/${docker.image.name}</name>
								<!-- <registry>myregistry:5000</registry> -->
								<!--
								<authConfig>
									<username>docker-user</username>
									<password>a pwd</password>
								</authConfig>
								-->
								<build>
									<dockerFileDir>${project.basedir}</dockerFileDir>
									<assembly>
										<descriptorRef>artifact</descriptorRef>
									</assembly>
									<tags>
										<tag>${project.version}</tag>
									</tags>
								</build>
								<run>
									<ports>
										<port>${container-port}</port>
									</ports>
									<wait>
										<!-- Check for this URL to return a 200 return code .... -->
										<url>${probe-url}</url>
										<time>120000</time>
									</wait>
								</run>
							</image>
						</images>
					</configuration>
					<executions>
						<execution>
							<id>build</id>
							<phase>post-integration-test</phase>
							<goals>
								<goal>build</goal>
							</goals>
						</execution>
						<!--
						<execution>
							<id>install</id>
							<phase>install</phase>
							<goals>
								<goal>push</goal>
							</goals>
						</execution>
						-->
					</executions>
				</plugin>
			</plugins>
		</build>
	</profile>
	<profile>
		<id>k8s</id>
		<activation>
			<activeByDefault>false</activeByDefault>
		</activation>
		<properties>
			<fabric8.skip.build.pom>true</fabric8.skip.build.pom>
			<jkube.enricher.jkube-service.type>LoadBalancer</jkube.enricher.jkube-service.type>
		</properties>
		<dependencyManagement>
			<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-kubernetes-dependencies</artifactId>
				<version>1.1.7.RELEASE</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			</dependencies>
		</dependencyManagement>

		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-starter-kubernetes-config</artifactId>
			</dependency>
		</dependencies>
		<build>
			<plugins>
				<plugin>
					<groupId>io.fabric8</groupId>
					<artifactId>fabric8-maven-plugin</artifactId>
					<configuration>
					<apiVersion>v2</apiVersion>
					    <dockerHost>container-registry:32000</dockerHost>
						<!--
						<dockerHost>https://127.0.0.1:32782</dockerHost>
						<certPath>C:\Users\frank\.minikube\certs</certPath>
						-->
						<enricher>
							<config>
								<fmp-service>
									<type>LoadBalancer</type>
								</fmp-service>
							</config>
						</enricher>
					</configuration>
					<executions>
						<execution>
							<id>fmp</id>
							<goals>
								<goal>resource</goal>
								<goal>build</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
			</plugins>
		</build>
	</profile>
	<profile>
		<id>openshift</id>
		<activation>
		<activeByDefault>false</activeByDefault>
		</activation>
		<properties>
		<openjdk18-openshift.version>1.3</openjdk18-openshift.version>
		<fabric8-maven-plugin.version>4.3.1</fabric8-maven-plugin.version>         
		<!-- <fabric8-maven-plugin.version>3.5.40</fabric8-maven-plugin.version>  -->
		<fabric8.openshift.trimImageInContainerSpec>true</fabric8.openshift.trimImageInContainerSpec>
		<fabric8.skip.build.pom>true</fabric8.skip.build.pom>	
		<!-- 
		<fabric8.generator.from>
			registry.access.redhat.com/redhat-openjdk-18/openjdk18-openshift:${openjdk18-openshift.version}
		</fabric8.generator.from>
		-->	
			
		<fabric8.generator.from>
			registry.access.redhat.com/redhat-openjdk-18/openjdk18-openshift
		</fabric8.generator.from>
						
		</properties>
		
		<dependencies>	
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-kubernetes-config</artifactId>
		</dependency>
		</dependencies>
		<build>
		<plugins>
			<plugin>
			<groupId>io.fabric8</groupId>
			<artifactId>fabric8-maven-plugin</artifactId>
			<version>${fabric8-maven-plugin.version}</version>
			<executions>
				<execution>
				<id>fmp</id>
				<goals>
					<goal>resource</goal>
					<goal>build</goal>
				</goals>
				</execution>
			</executions>
			</plugin>
		</plugins>
		</build>
	</profile>
	<profile>
		<!-- docker run -p 8080:8080 hello-kogito:1.0-SNAPSHOT -->
		<id>native-docker</id>
		<dependencies>
			<dependency>
				<groupId>org.springframework.experimental</groupId>
				<artifactId>spring-graalvm-native</artifactId>
				<version>0.9.0-SNAPSHOT</version>
			</dependency>
		</dependencies>
		<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<image>
					<builder>paketobuildpacks/builder:tiny</builder>
					<env>
						<BP_BOOT_NATIVE_IMAGE>1</BP_BOOT_NATIVE_IMAGE>
						<BP_BOOT_NATIVE_IMAGE_BUILD_ARGUMENTS>
						-Dspring.native.remove-yaml-support=true
						-Dspring.spel.ignore=true
						</BP_BOOT_NATIVE_IMAGE_BUILD_ARGUMENTS>
					</env>
					</image>
				</configuration>
			</plugin>
		</plugins>
		</build>
	</profile>
	<profile>
		<id>native-image</id>
		<build>
			<plugins>
				<plugin>
					<groupId>org.graalvm.nativeimage</groupId>
					<artifactId>native-image-maven-plugin</artifactId>
					<version>20.3.0</version>
					<configuration>
						<mainClass>com.bpwizard.bpm.BpmApplication</mainClass>
						<buildArgs>-Dspring.native.remove-yaml-support=true -Dspring.spel.ignore=true</buildArgs>
					</configuration>
					<executions>
						<execution>
						<goals>
							<goal>native-image</goal>
						</goals>
						<phase>package</phase>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-maven-plugin</artifactId>
				</plugin>
			</plugins>
		</build>
	</profile>
</profiles>	
        <!--
	<repositories>
		<repository>
			<id>spring-milestones</id>
			<name>Spring Milestones</name>
			<url>https://repo.spring.io/milestone</url>
		</repository>		
	</repositories>
        -->
	<!-- 	
	<repositories>
		<repository>
			<snapshots />
			<id>spring-snapshots</id>
			<name>Spring Snapshots</name>
			<url>https://repo.spring.io/snapshot</url>
		</repository>
		<repository>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
			<id>spring-milestones</id>
			<name>Spring Milestones</name>
			<url>https://repo.spring.io/milestone</url>
		</repository>
	</repositories>
	<pluginRepositories>
		<pluginRepository>
			<snapshots />
			<id>spring-snapshots</id>
			<name>Spring Snapshots</name>
			<url>https://repo.spring.io/snapshot</url>
		</pluginRepository>
		<pluginRepository>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
			<id>spring-milestones</id>
			<name>Spring Milestones</name>
			<url>https://repo.spring.io/milestone</url>
		</pluginRepository>
	</pluginRepositories>
	-->
</project>	
