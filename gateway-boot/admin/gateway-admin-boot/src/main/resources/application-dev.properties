spring.datasource.url=jdbc:mysql://mysql:3306/gateway?allowPublicKeyRetrieval=true&useSSL=false&autoReconnect=true&nullNamePatternMatchesAll=true
#spring.datasource.url: jdbc:h2:file:./h2/wcm_bpm/data;DB_CLOSE_ON_EXIT=FALSE
#spring.datasource.url: jdbc:h2:mem:modeshape;MODE=PostgreSQL;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
spring.datasource.username: wcmbpm
spring.datasource.password: P@ssw0rd
spring.datasource.driver-class-name: com.mysql.jdbc.Driver
#spring.datasource.driver-class-name: org.h2.Driver
spring.datasource.testOnBorrow=true
spring.datasource.testWhileIdle=true
spring.datasource.timeBetweenEvictionRunsMillis=60000
spring.datasource.minEvictableIdleTimeMillis=30000
spring.datasource.validationQuery=SELECT 1
spring.datasource.max-active=15
spring.datasource.max-idle=10
spring.datasource.max-wait=8000
#spring.datasource.hikari:
spring.datasource.hikari.connection-test-query=select 1
#spring.datasource.hikari.idle-timeout=5000
spring.datasource.hikari.idle-timeout: 600000
# spring.datasource.hikari.max-lifetime=120000
spring.datasource.hikari.max-lifetime=1800000
spring.datasource.hikari.maximum-pool-size=5
spring.datasource.hikari.minimum-idle=5
#spring.datasource.hikari.connectionTimeout=30000

spring.security.oauth2.client.registration.google.clientId=261631246788-24j092i1c5o1h557cdmcqn9ir3un5liv.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.clientSecret=WKhGpSSMc0L_6-_SQhQU32oa
spring.security.oauth2.client.registration.google.redirectUriTemplate="{baseUrl}/oauth2/callback/{registrationId}"
spring.security.oauth2.client.registration.google.scope[0]=email
spring.security.oauth2.client.registration.google.scope[1]=profile

spring.security.oauth2.client.registration.facebook.clientId=121189305185277
spring.security.oauth2.client.registration.facebook.clientSecret=42ffe5aa7379e8326387e0fe16f34132
spring.security.oauth2.client.registration.facebook.redirectUriTemplate="{baseUrl}/oauth2/callback/{registrationId}"
spring.security.oauth2.client.registration.facebook.scope[0]=email
spring.security.oauth2.client.registration.facebook.scope[1]=public_profile

spring.security.oauth2.client.registration.github.clientId=1f9824d889fc63e9e97a
spring.security.oauth2.client.registration.github.clientSecret=78c73961f61eb28a22f41ff5b5313324415ee4c4
spring.security.oauth2.client.registration.github.redirectUriTemplate="{baseUrl}/oauth2/callback/{registrationId}"
spring.security.oauth2.client.registration.github.scope[0]=user:email
spring.security.oauth2.client.registration.github.scope[1]=read:user
#spring.security.oauth2.client.registration.keycloak.clientId=wcm_bpm
#spring.security.oauth2.client.registration.keycloak.client-name=wcm_bpm
#spring.security.oauth2.client.registration.keycloak.client-secret=bdaedae5-8aed-4d3c-a079-3077fc355bbe
#spring.security.oauth2.client.registration.keycloak.provider=keycloak
#spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code
#spring.security.oauth2.client.registration.keycloak.redirectUriTemplate="{baseUrl}/oauth2/callback/{registrationId}"
#spring.security.oauth2.client.registration.keycloak.redirect-uri-template="{baseUrl}/login/oauth2/code/{registrationId}"
#spring.security.oauth2.client.registration.keycloak.scope=openid,profile

spring.security.oauth2.client.provider.keycloak.authorization-uri=${keycloak.realm-url}/protocol/openid-connect/auth
#spring.security.oauth2.client.provider.keycloak.jwk-set-uri=${keycloak.realm-url}/protocol/openid-connect/certs
#spring.security.oauth2.client.provider.keycloak.token-uri=${keycloak.realm-url}/protocol/openid-connect/token
## would be cool if there was a end-session-uri to propagate logouts 
##  User info endpoint not needed since Keycloak uses self-contained value tokens
##  user-info-uri: ${keycloak.realm-url}/protocol/openid-connect/userinfo
##spring.security.oauth2.client.provider.keycloak.user-name-attribute=preferred_username
#spring.security.oauth2.client.provider.keycloak.user-name-attribute=user_name

#spring.security.oauth2.client.provider.facebook.authorizationUri=https://www.facebook.com/v3.0/dialog/oauth
#spring.security.oauth2.client.provider.facebook.tokenUri=https://graph.facebook.com/v3.0/oauth/access_token
#spring.security.oauth2.client.provider.facebook.userInfoUri: https://graph.facebook.com/v3.0/me?fields=id,first_name,middle_name,last_name,name,email,verified,is_verified,picture.width(250).height(250)

#bpw.auth.tokenSecret=926D96C90030DD58429D2751AC1BDBBC
#bpw.auth.tokenExpirationMsec: 864000000

# After successfully authenticating with the OAuth2 Provider,
# we'll be generating an auth token for the user and sending the token to the
# redirectUri mentioned by the client in the /oauth2/authorize request.
# We're not using cookies because they won't work well in mobile clients.
bpw.oauth2.authorizedRedirectUris[0]=http://gateway-ui:5009/oauth2/redirect 
bpw.oauth2.authorizedRedirectUris[1]=myandroidapp://oauth2/redirect
bpw.oauth2.authorizedRedirectUris[2]=myiosapp://oauth2/redirect
# bpw.oauth2.application-url=http://localhost:19090
# bpw.oauth2.oauth2-authentication-success-url=http://localhost:19090/social-login-success?token=
# bpw.oauth2.application-url=http://localhost:3000
# bpw.oauth2.oauth2-authentication-success-url=http://localhost:3000/oauth2/redirect?token=

# Comma separated values of CORS allowedOrigins
# If this property is not given, CORS is not configured
bpw.cors.allowed-origins=http://gateway-ui:5009
#bpw.cors.exposedHeaders=Cache-Control,Connection,Content-Type,Date,Expires,Pragma,Server,Set-Cookie,Transfer-Encoding,X-Content-Type-Options,X-XSS-Protection,X-Frame-Options,X-Application-Context,lang,Authorization
bpw.recaptcha.sitekey=6LdwxRcUAAAAABkhOGWQXhl9FsR27D5YUJRuGzx0
bpw.recaptcha.secretkey=6LdwxRcUAAAAADaG0Eo1qkYCco15cnngiBoBt2IO
  
# An aes-128-cbc key generated at https://asecuritysite.com/encryption/keygen (take the "key" field)  
bpw.jwt.secret=841D8A6C80CBA4FCAD32D5367C18C53B
#bpw.jwt.expiration-millis=864000000 # 10 days
#bpw.jwt.short-lived-millis=120000   # two minutes
bpw.jwt.short-lived-millis=864000000 # 10 days

management.health.camunda.enabled=true

hazelcast.enabled=false
hazelcast.loggingType: slf4j
hazelcast.backupCount: 1
hazelcast.port: 5701
hazelcast.members: 127.0.0.1:5701
hazelcast.groupName: wcm_bpm
hazelcast.instanceName: wcm_bpm
hazelcast.managementCenter.url=http://localhost:18080/hazelcast-mancenter
hazelcast.managementCenteren.abled=false
hazelcast.caches[0].cacheName=wcm_bpm
hazelcast.caches[0].timeToLiveSeconds=2000
hazelcast.caches[0].maxSize=2000
hazelcast.caches[0].maxSizePolicy=PER_NODE
hazelcast.caches[0].evictionPolicy=LFU 

hazelcast.caches[1].cacheName=fib
hazelcast.caches[1].timeToLiveSeconds=2000
hazelcast.caches[1].maxSize=2000
hazelcast.caches[1].maxSizePolicy=PER_NODE
hazelcast.caches[1].evictionPolicy=LFU       
hazelcast.caches[1].entryListeners[0].includeValue: true
hazelcast.caches[1].entryListeners[0].local=true
hazelcast.caches[1].entryListeners[0].listener: "com.oner.demo.seajug.hazelcast.scalewithhazelcast.hz.MyMapListener"   
          
hazelcast.caches[2].cacheName="spring:session:sessions"
hazelcast.caches[2].timeToLiveSeconds=2000
hazelcast.caches[2].maxSize=2000
hazelcast.caches[2].maxSizePolicy=PER_NODE
hazelcast.caches[2].evictionPolicy=LFU       
hazelcast.caches[2].attributes[0].extractor="org.springframework.session.hazelcast.PrincipalNameExtractor"
hazelcast.caches[2].attributes[0].name=principalName
hazelcast.caches[2].indexes[0].attribute=principalName
hazelcast.caches[2].indexes[0].ordered=false  


          
           
                 
#Use Jasypt to generate the encrypted password, download from http://www.jasypt.org/,
# from jasypt\bin and use the encrypt.sh or encrypt.bat to encrypt your variables 
#encrypt.bat input=MBcoder password=password
#Password@1 encrypted with password
hazelcast.keyStorePassword=ENC(uTSqb9grs1+vUv3iN8lItC0kl65lMG+8)
#hazelcast.keyStorePassword: password
hazelcast.enableSSL=false
hazelcast.keyStore=keystore
hazelcast.keyManagerAlgorithm=SunX509
hazelcast.trustManagerAlgorithm=SunX509
hazelcast.enableEncryption=false
hazelcast.encryptionAlgorithm=PBEWithMD5AndDES
##Password@2 encrypted with password
hazelcast.encryptionPassword=ENC(dQWokHUXXFe+OqXRZYWu22BpXoRZ0Drt)
#hazelcast.encryptionPassword=Password@2
hazelcast.encryptionSalt=salt
  
jasypt.encryptor.password=password


ignite.enabled=false
ignite.instanceName=wcm-bpm
# To send a computational task to a server node
ignite.peerClassLoadingEnabled=true
ignite.localHost=127.0.0.1
ignite.ipfinderAddresses=192.168.110.81:47500..47509
ignite.tcpDiscoveryLocalPort=47500
ignite.tcpDiscoveryLocalPortRange=9
# ignite.communicationSpiLocalAddress: localhost
ignite.communicationSpiLocalAddress=127.0.0.1
ignite.communicationSpiLocalPort=48100
ignite.communicationSpiSlowClientQueueLimit=1000

ignite.caches[0].cacheName=wcm
ignite.caches[0].atomicityMode=ATOMIC
ignite.caches[0].cacheMode=REPLICATED
ignite.caches[0].writeThrough=true
ignite.caches[0].readThrough=true
ignite.caches[0].writeBehindEnabled=false
ignite.caches[0].backups=1
ignite.caches[0].statisticsEnabled=true
ignite.caches[0].writeBehindFlushFrequency=5000
ignite.caches[0].initSchema=true
ignite.caches[0].dataSourceBean=modeshapeDataSource
ignite.caches[0].createTableQuery="create table if not exists WCM_ENTRIES (akey binary(250) primary key, val varbinary(20480))"
ignite.caches[0].loadQuery="select * from WCM_ENTRIES where akey=?"
ignite.caches[0].updateQuery="update WCM_ENTRIES set val=? where akey=?"
ignite.caches[0].insertQuery="insert into WCM_ENTRIES (akey, val) values (?, ?)"
ignite.caches[0].deleteQuery="delete from WCM_ENTRIES where akey=?"

ignite.caches[1].cacheName=wcm
ignite.caches[1].atomicityMode=ATOMIC
ignite.caches[1].cacheMode=REPLICATED
ignite.caches[1].writeThrough=true
ignite.caches[1].readThrough=true
ignite.caches[1].writeBehindEnabled=false
ignite.caches[1].backups=1
ignite.caches[1].statisticsEnabled=false
ignite.caches[1].writeBehindFlushFrequency=5000
ignite.caches[1].initSchema=true
ignite.caches[1].dataSourceBean=modeshapeDataSource
ignite.caches[1].createTableQuery="create table if not exists BPM_ENTRIES (akey binary(250) primary key, val varbinary(20480))"
ignite.caches[1].loadQuery="select * from BPM_ENTRIES where akey=?"
ignite.caches[1].updateQuery="update BPM_ENTRIES set val=? where akey=?"
ignite.caches[1].insertQuery="insert into BPM_ENTRIES (akey, val) values (?, ?)"
ignite.caches[1].deleteQuery="delete from BPM_ENTRIES where akey=?"


ignite.caches[2].cacheName=microflow
ignite.caches[2].atomicityMode=ATOMIC
ignite.caches[2].cacheMode=REPLICATED
ignite.caches[2].writeThrough=true
ignite.caches[2].readThrough=true
ignite.caches[2].writeBehindEnabled=true
ignite.caches[2].backups=1
ignite.caches[2].statisticsEnabled=true
ignite.caches[2].writeBehindFlushFrequency=5000
ignite.caches[2].initSchema=true
ignite.caches[2].dataSourceBean=modeshapeDataSource
ignite.caches[2].createTableQuery="create table if not exists MICROFLOW_ENTRIES (akey binary(250) primary key, val varbinary(20480))"
ignite.caches[2].loadQuery="select * from MICROFLOW_ENTRIES where akey=?"
ignite.caches[2].updateQuery="update MICROFLOW_ENTRIES set val=? where akey=?"
ignite.caches[2].insertQuery="insert into MICROFLOW_ENTRIES (akey, val) values (?, ?)"
ignite.caches[2].deleteQuery="delete from MICROFLOW_ENTRIES where akey=?"

mybatis.config-location=classpath:/mybatis/mybatis-config.xml
mybatis.mapper-locations=classpath:/mappers/*.xml

gateway.sync.http.enabled=true
#gateway.sync.websocket.enabled=false

logging.level.root=info
logging.level.org.springframework.boot=info
logging.level.org.apache.ibatis=info
logging.level.com.bpwizard.gateway=info