1. sequencing


	Node fileNode = session.getNode("/files/schemas/Customers.xsd");
	Property content = fileNode.getProperty("jcr:content/jcr:data");
	Node output = fileNode; // could be anywhere!
	 
	boolean success = session.sequence("XSD Sequencer", content, output);

	
	A BPMN sequencer
    

2. syndiation

   > record last syndication timestamp
   > start next syndiction from there via EventJournal
   > Manual EventJournal clean up instead of clear it up periodically.
   
3. Binary content type:
   ----------------------------------------------------------------
   nt:file:
     "jcr:data" property the "jcr:content" child node.
   Node fileNode = session.getNode("/files/schemas/Customers.xsd");
   Property content = fileNode.getProperty("jcr:content/jcr:data");
   
   
   
   
	[nt:folder] > nt:hierarchyNode
	  + * (nt:hierarchyNode) version
	 
	[nt:file] > nt:hierarchyNode
	  + jcr:content (nt:base) primary mandatory
	 
	[nt:resource] > mix:mimeType, mix:lastModified
	  - jcr:data (binary) primary mandatory
   
   
   -----------------------------------------------------------------
    
    create:
    
		javax.jcr.Session session = ...
		javax.jcr.ValueFactory factory = session.getValueFactory();
		 
		// Create the binary value ...
		java.io.InputStream stream = ...
		javax.jcr.Binary binary = factory.createBinary(stream);
		 
		// Use the binary value ...
		javax.jcr.Property property = ...
		property.setValue(binary);
		 
		// Save the changes ...
		session.save();
		
		
			InputStream stream = new BufferedInputStream(new FileInputStream(file));
            Node folder = root.addNode("FolderPdf " + rnd.nextInt(), "nt:folder");
            Node fileNode = folder.addNode("FilePdf " + rnd.nextInt(), "nt:file");
            Node contentNode = fileNode.addNode("jcr:content", "nt:resource");
            Binary binary = session.getValueFactory().createBinary(stream);
            contentNode.setProperty("jcr:data", binary);
   
   read:
   
		javax.jcr.Property property = ...
		javax.jcr.Binary binary = property.getValue().getBinary();
		java.io.InputStream stream = binary.getStream();
		// Use the stream ...
		Binary content = statusReportContent.getProperty("jcr:data").getBinary();
		InputStream stream = content.getInputStream();
		try {
		    // do something with the stream
		} finally {
		    stream.close();
		}
   -----------------------------------------------------------------
   > STRING, LONG, DATE, DOUBLE, DECIMAL, NAME, and PATH
   
   > BINARY: text extractor -> index on binary properties
   
   ----------------------------------------------------------
   javax.jcr.PropertyType
	    
	    STRING
		BINARY
		LONG
		DOUBLE
		DECIMAL
		DATE
		BOOLEAN
		
		NAME
		PATH
		REFERENCE
		WEAKREFERENCE
		
		URI
 
   ------------------------------------------------------
   JCR-SQL2 and column name that use indexes behind the scene
   -------------------------------------------------------
     Operand   Column name

     NAME       jcr:name

     LOCALNAME  mode:localName

	 DEPTH      mode:depth

     PATH       jcr:path

     CHILDCOUNT mode:childCount

     NODEID     mode:id

> REFERENCE
   Node node = null;
   org.modeshape.jcr.api.ValueFactory factory = (org.modeshape.jcr.api.ValueFactory) session.getValueFactory();
   Value reference = factory.createSimpleReference(node); 
   property.setValue(reference);
   
> Node Id -- uuid
   Node.getIdentifier()  -- jcr 2.0
   
   
> authorization

  session.hasPermission(java.lang.String absPath, java.lang.String actions)
  session.checkPermission(java.lang.String absPath, java.lang.String actions)
  
  actions:
  	add_node: If hasPermission(path, "add_node") returns true, then this Session has permission to add a node at path.
	set_property: If hasPermission(path, "set_property") returns true, then this Session has permission to set (add or change) a property at path.
	remove: If hasPermission(path, "remove") returns true, then this Session has permission to remove an item at path.
	read: If hasPermission(path, "read") returns true, then this Session has permission to retrieve (and read the value of, in the case of a property) an item at path.

> Standard node types:

	<jcr='http://www.jcp.org/jcr/1.0'>
	<nt='http://www.jcp.org/jcr/nt/1.0'>
	<mix='http://www.jcp.org/jcr/mix/1.0'>
	 
	// ------------------------------------------------------------------------
	//                             Pre-defined Node Types
	// ------------------------------------------------------------------------
	 
	[nt:base] abstract
	  - jcr:primaryType (name) mandatory autocreated 
	      protected compute 
	  - jcr:mixinTypes (name) protected multiple compute
	   
	[nt:unstructured] 
	  orderable 
	  - * (undefined) multiple 
	  - * (undefined) 
	  + * (nt:base) = nt:unstructured sns version 
	 
	[mix:created] mixin 
	  - jcr:created (date) protected 
	  - jcr:createdBy (string) protected
	 
	[nt:hierarchyNode] > mix:created abstract
	 
	[nt:file] > nt:hierarchyNode 
	  + jcr:content (nt:base) primary mandatory
	 
	[nt:linkedFile] > nt:hierarchyNode 
	  - jcr:content (reference) primary mandatory
	 
	[nt:folder] > nt:hierarchyNode 
	  + * (nt:hierarchyNode) version
	 
	[mix:referenceable] mixin 
	  - jcr:uuid (string) mandatory autocreated protected initialize 
	 
	[mix:mimeType] mixin 
	  - jcr:mimeType (string)  
	  - jcr:encoding (string)
	 
	[mix:lastModified] mixin 
	  - jcr:lastModified (date) 
	  - jcr:lastModifiedBy (string)
	   
	[nt:resource] > mix:mimeType, mix:lastModified 
	  - jcr:data (binary) primary mandatory
	 
	[nt:nodeType] 
	  - jcr:nodeTypeName (name) mandatory protected copy 
	  - jcr:supertypes (name) multiple protected copy
	  - jcr:isAbstract (boolean) mandatory protected copy 
	  - jcr:isMixin (boolean) mandatory protected copy
	  - jcr:isQueryable (boolean) mandatory protected copy
	  - jcr:hasOrderableChildNodes (boolean) mandatory protected copy 
	  - jcr:primaryItemName (name) protected copy
	  + jcr:propertyDefinition (nt:propertyDefinition)  = nt:propertyDefinition sns protected copy 
	  + jcr:childNodeDefinition (nt:childNodeDefinition) = nt:childNodeDefinition sns protected copy
	 
	[nt:propertyDefinition] 
	  - jcr:name (name) protected
	  - jcr:autoCreated (boolean) mandatory protected
	  - jcr:mandatory (boolean) mandatory protected
	  - jcr:isFullTextSearchable (boolean) mandatory protected
	  - jcr:isQueryOrderable (boolean) mandatory protected
	  - jcr:onParentVersion (string) mandatory protected
	      < 'COPY', 'VERSION', 'INITIALIZE', 'COMPUTE', 
	        'IGNORE', 'ABORT'
	  - jcr:protected (boolean) mandatory protected
	  - jcr:requiredType (string) mandatory protected
	    < 'STRING', 'URI', 'BINARY', 'LONG', 'DOUBLE', 'DECIMAL', 'BOOLEAN', 
	      'DATE', 'NAME', 'PATH', 'REFERENCE', 'WEAKREFERENCE', 'UNDEFINED'
	  - jcr:valueConstraints (string) multiple protected
	  - jcr:availableQueryOperators (name) mandatory multiple protected
	  - jcr:defaultValues (undefined) multiple protected
	  - jcr:multiple (boolean) mandatory protected
	 
	[nt:childNodeDefinition] 
	  - jcr:name (name) protected
	  - jcr:autoCreated (boolean) mandatory protected
	  - jcr:mandatory (boolean) mandatory protected
	  - jcr:onParentVersion (string) mandatory protected
	      < 'COPY', 'VERSION', 'INITIALIZE', 'COMPUTE', 
	        'IGNORE', 'ABORT'
	  - jcr:protected (boolean) mandatory protected
	  - jcr:requiredPrimaryTypes (name) = 'nt:base' mandatory protected multiple 
	  - jcr:defaultPrimaryType (name) protected
	  - jcr:sameNameSiblings (boolean) mandatory protected
	 
	[nt:versionHistory] > mix:referenceable 
	  - jcr:versionableUuid (string) mandatory autocreated protected abort 
	  - jcr:copiedFrom (weakreference) protected abort < 'nt:version'
	  + jcr:rootVersion (nt:version) = nt:version mandatory autocreated protected abort 
	  + jcr:versionLabels (nt:versionLabels) = nt:versionLabels mandatory autocreated protected abort 
	  + * (nt:version) = nt:version protected abort
	 
	 
	[nt:versionLabels] 
	  - * (reference) protected abort < 'nt:version'
	 
	[nt:version] > mix:referenceable 
	  - jcr:created (date) mandatory autocreated protected abort 
	  - jcr:predecessors (reference) protected multiple abort < 'nt:version'
	  - jcr:successors (reference) protected multiple abort < 'nt:version'
	  - jcr:activity (reference) protected abort < 'nt:activity'
	  + jcr:frozenNode (nt:frozenNode) protected abort
	 
	[nt:frozenNode] > mix:referenceable 
	  orderable 
	  - jcr:frozenPrimaryType (name) mandatory autocreated protected abort 
	  - jcr:frozenMixinTypes (name) protected multiple abort 
	  - jcr:frozenUuid (string) mandatory autocreated protected abort 
	  - * (undefined) protected abort 
	  - * (undefined) protected multiple abort 
	  + * (nt:base) protected sns abort
	 
	[nt:versionedChild] 
	  - jcr:childVersionHistory (reference) mandatory autocreated protected abort < 'nt:versionHistory'
	 
	[nt:query] 
	  - jcr:statement (string) 
	  - jcr:language (string)
	 
	[nt:activity] > mix:referenceable 
	  - jcr:activityTitle (string) mandatory autocreated protected
	 
	 
	[mix:simpleVersionable] mixin 
	  - jcr:isCheckedOut (boolean) = 'true' mandatory autocreated protected ignore 
	 
	[mix:versionable] > mix:simpleVersionable, mix:referenceable mixin 
	  - jcr:versionHistory (reference) mandatory protected ignore < 'nt:versionHistory'
	  - jcr:baseVersion (reference) mandatory protected ignore < 'nt:version'
	  - jcr:predecessors (reference) mandatory protected multiple ignore < 'nt:version'
	  - jcr:mergeFailed (reference) protected multiple abort 
	  - jcr:activity (reference) protected < 'nt:version'
	  - jcr:configuration (reference) protected ignore < 'nt:configuration'
	 
	[nt:configuration] > mix:versionable 
	  - jcr:root (reference) mandatory autocreated protected
	 
	[nt:address] 
	  - jcr:protocol (string) 
	  - jcr:host (string)  
	  - jcr:port (string) 
	  - jcr:repository (string) 
	  - jcr:workspace (string) 
	  - jcr:path (path) 
	  - jcr:id (weakreference)
	 
	[nt:naturalText] 
	  - jcr:text (string) 
	  - jcr:messageId (string)
	 
	 
	// ------------------------------------------------------------------------
	//                             Pre-defined Mixins
	// ------------------------------------------------------------------------
	 
	[mix:etag] mixin
	  - jcr:etag (string) protected autocreated
	 
	[mix:lockable] mixin 
	  - jcr:lockOwner (string) protected ignore 
	  - jcr:lockIsDeep (boolean) protected ignore 
	 
	[mix:lifecycle] mixin 
	  - jcr:lifecyclePolicy (reference) protected initialize 
	  - jcr:currentLifecycleState (string) protected initialize
	 
	[mix:managedRetention] > mix:referenceable mixin 
	  - jcr:hold (string) protected multiple 
	  - jcr:isDeep (boolean) protected multiple 
	  - jcr:retentionPolicy (reference) protected
	 
	[mix:shareable] > mix:referenceable mixin
	 
	[mix:title] mixin 
	  - jcr:title (string) 
	  - jcr:description (string)  
	 
	[mix:language] mixin 
	  - jcr:language (string)
	  
> ModeShape built-in node types

    //------------------------------------------------------------------------------
	// N A M E S P A C E S
	//------------------------------------------------------------------------------
	<jcr = "http://www.jcp.org/jcr/1.0">
	<nt  = "http://www.jcp.org/jcr/nt/1.0">
	<mix = "http://www.jcp.org/jcr/mix/1.0">
	<mode = "http://www.modeshape.org/1.0">
	 
	//------------------------------------------------------------------------------
	// N O D E T Y P E S
	//------------------------------------------------------------------------------
	 
	[mode:namespace] > nt:base primaryitem mode:uri
	- mode:uri (string) protected version
	- mode:generated (boolean) protected version
	 
	[mode:namespaces] > nt:base
	+ * (mode:namespace) = mode:namespace protected version
	 
	[mode:nodeTypes] > nt:base
	+ * (nt:nodeType) = nt:nodeType protected version
	 
	[mode:lock] > nt:base
	- mode:lockToken (string) protected ignore
	- jcr:lockOwner (string) protected ignore
	- mode:lockingSession (string) protected ignore
	- mode:expirationDate (date) protected ignore
	- mode:isSessionScoped (boolean) protected ignore
	- jcr:lockIsDeep (boolean) protected ignore
	- mode:isHeldBySession (boolean) protected ignore
	- mode:workspace (string) protected ignore
	 
	[mode:locks] > nt:base
	+ * (mode:lock) = mode:lock protected ignore
	 
	[mode:versionHistoryFolder] > nt:base
	+ * (nt:versionHistory) = nt:versionHistory protected ignore
	+ * (mode:versionHistoryFolder) protected ignore
	 
	[mode:versionStorage] > mode:versionHistoryFolder
	 
	[mode:repository] > nt:base, mix:created
	 
	[mode:federation]
	+ mode:projection (mode:projection) = mode:projection sns protected ignore
	 
	[mode:projection]
	- mode:externalNodeKey (String) mandatory protected ignore
	- mode:projectedNodeKey (String) mandatory protected ignore
	- mode:alias (String) mandatory protected ignore
	 
	[mode:system] > nt:base
	- * (undefined) protected
	- * (undefined) multiple protected
	+ mode:namespaces (mode:namespaces) = mode:namespaces autocreated mandatory protected abort
	+ mode:locks (mode:locks) = mode:locks autocreated mandatory protected abort
	+ mode:repository (mode:repository) = mode:repository autocreated protected abort
	+ mode:federation (mode:federation) = mode:federation autocreated protected abort
	+ mode:indexes (mode:indexes) = mode:indexes autocreated protected abort
	+ jcr:nodeTypes (mode:nodeTypes) = mode:nodeTypes autocreated mandatory protected abort
	+ jcr:versionStorage (mode:versionStorage) = mode:versionStorage autocreated mandatory protected abort
	 
	[mode:root] > nt:base, mix:referenceable orderable
	- * (undefined) multiple version
	- * (undefined) version
	+ jcr:system (mode:system) = mode:system autocreated mandatory protected ignore
	+ * (nt:base) = nt:unstructured sns version
	 
	// This is the same as 'nt:resource' (which should generally be used instead)...
	[mode:resource] > nt:base, mix:mimeType, mix:lastModified primaryitem jcr:data
	- jcr:data (binary) mandatory
	 
	[mode:share] > mix:referenceable    // Used for non-original shared nodes, but never really exposed to JCR clients
	- mode:sharedUuid (reference) mandatory protected initialize 
	 
	[mode:hashed] mixin
	- mode:sha1 (string)
	 
	// A marker node type that can be used to denote areas into which files can be published.
	// Published areas have optional titles and descriptions.
	[mode:publishArea] > mix:title mixin
	 
	[mode:derived] mixin
	- mode:derivedFrom (path) // the location of the original information from which this was derived
	- mode:derivedAt (date)  // the timestamp of the last change to the original information from which this was derived
	 
	[mode:accessControllable] mixin 
	    + mode:acl (mode:Acl) protected
	[mode:Acl] noquery
	    + * (mode:Permission) protected
	[mode:Permission] noquery
	    - name (string) nofulltext
	    - privileges (string) multiple nofulltext protected
	 
	// -----------------------
	// Query index definitions
	// -----------------------
	 
	// We organize the indexes by providers for several reasons. 
	// 1. It's easier to ensure that all indexes have a provider.
	// 2. The name of the indexes really needs to be unique only for a given provider
	// 3. When an index is removed, we know which provider it is for based upon the path.
	 
	[mode:indexes]
	+ * (mode:indexProvider) = mode:indexProvider protected ignore
	 
	[mode:indexProvider]
	+ * (mode:index) = mode:index protected ignore
	 
	[mode:index] > mix:referenceable, mix:created, mix:lastModified
	- mode:kind (string) mandatory protected ignore
	    < 'VALUE', 'UNIQUE_VALUE', 'ENUMERATED_VALUE', 'TEXT', 'NODE_TYPE'
	- mode:nodeTypeName (name) = 'nt:base' mandatory protected ignore
	- mode:workspaces (string) = "*" mandatory protected ignore
	- mode:synchronous (boolean) = 'true' mandatory protected ignore
	- jcr:description (string) protected ignore
	- * (undefined) protected ignore
	- * (undefined) multiple protected ignore
	+ mode:indexColumn (mode:indexColumn) = mode:indexColumn mandatory protected sns
	 
	[mode:indexColumn] > mix:referenceable
	- mode:propertyName (name) mandatory protected ignore
	- mode:columnTypeName (string) mandatory protected
	    < 'STRING', 'URI', 'BINARY', 'LONG', 'DOUBLE', 'DECIMAL', 'BOOLEAN', 
	      'DATE', 'NAME', 'PATH', 'REFERENCE', 'WEAKREFERENCE', 'UNDEFINED'
	 
	// -----------------------
	// Large unordered collections
	// -----------------------
	[mode:unorderedCollection] mixin abstract
	 
	// Tiny unordered collection, where the number of range buckets is 16
	[mode:unorderedTinyCollection] > mode:unorderedCollection mixin
	 
	// Small unordered collection, where the number of range buckets is 256
	[mode:unorderedSmallCollection] > mode:unorderedCollection mixin
	 
	// Large unordered collection, where the number of range buckets is 4096
	[mode:unorderedLargeCollection] > mode:unorderedCollection mixin
	 
	// Very large unordered collection, where the number of range buckets is 65536
	[mode:unorderedHugeCollection] > mode:unorderedCollection mixin	  
	
	
> Spring boot project config for clustering

  node 1: port 8080
      
      -Djava.security.egd=file:/dev/./urandom-8080 -Dspring.profiles.active=dev 
      -Djasypt.encryptor.password=password -DROOT_LOG_LEVEL=WARN -DAPP_LOG_LEVEL=DEBUG 
      -DWCM_BPM_PORT=8080 -Dlog.root.dir=c:/var/spring-logs/wcm-bpm-boot-8080 
      -Dspring.jta.log-dir=c:/var/modeshape/transaction-logs-8080
      -Dglowroot.agent.port=5000 -javaagent:c:/tools/glowroot/glowroot-0.13.6/glowroot.jar
      
  node 2: port 18080 	
      -Djava.security.egd=file:/dev/./urandom-18080 -Dspring.profiles.active=dev 
      -Djasypt.encryptor.password=password -DROOT_LOG_LEVEL=WARN -DAPP_LOG_LEVEL=DEBUG 
      -DWCM_BPM_PORT=18080 -Dlog.root.dir=c:/var/spring-logs/wcm-bpm-boot-18080 
      -Dspring.jta.log-dir=c:/var/modeshape/transaction-logs-18080 -Dglowroot.agent.port=5100 
      -javaagent:c:/tools/glowroot/glowroot-0.13.6/glowroot.jar